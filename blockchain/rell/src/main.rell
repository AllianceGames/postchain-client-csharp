module;

entity city { key name; zip: integer; }

struct my_struct {
  a: text;
  b: text;
}

struct my_nested_struct {
  n: big_integer;
  my_struct;
}

struct my_big_struct {
    s: text;
    ba:  byte_array;
    b:  boolean;
    i: integer;
    l: integer;
    f: decimal;
    n: big_integer;
    e: my_enum;
}

enum my_enum {
    V1,
    V2,
}

operation insert_city(name, zip: integer) {
    create city (name, zip);
}

operation test_map(m: map<text, integer>) {
    print(m);
}

operation test_bigint_op(b: big_integer) {
    print(op_context.transaction.tx_rid);
    print(b);
}

query test_map2(m: map<text, integer>) {
    print(m);
    return m;
}

operation reset() {
    delete city @* {};
}

query get_city(name) = city @ {name}.zip;

query get_zip(zip: integer) = city @ {zip}.name;


query test_string(text) {
    print("test_string", text);
    return text;
}

query test_decimal(decimal) {
    print("test_decimal", decimal);
    return decimal;
}

query test_null() = null;

query test_pubkey(pubkey) {
    print("test_pubkey", pubkey);
    return pubkey;
}

query test_boolean(boolean) {
    print("test_boolean", boolean);
    return boolean;
}

query test_timestamp(timestamp) {
    print("test_timestamp", timestamp);
    return timestamp;
}

query test_bigint(n: big_integer) {
    print("test_bigint", n);
    return n;
}

query test_struct(s: my_struct) {
    print("test_struct", s);
    return s;
}

query test_nested_struct(s: my_nested_struct) {
    print("test_nested_struct", s);
    return s;
}

query test_big_struct(s: my_big_struct) {
    print("test_big_struct", s);
    return s;
}

query test_enum(e: my_enum) {
    print("test_enum", e);
    return e;
}

namespace ft3{
    query get_account_by_id(id: byte_array) {
        print("ft3.get_account_by_id", id);
        return id;
    }
}
