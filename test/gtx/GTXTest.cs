using Xunit;
using Chromia.PostchainClient.GTX.ASN1Messages;
using System;
using System.Collections.Generic;

namespace Chromia.PostchainClient.Tests.GTX
{
    public class GTXTest
    {
        [Fact]
        public void SimpleOperationTest()
        {
            var operationName = "TestOperation";
            var arg = new GTXValue();
            arg.Choice = GTXValueChoice.Integer;
            arg.Integer = 42;

            var gtxOperation = new GTXOperation();
            gtxOperation.OpName = operationName;
            gtxOperation.Args.Add(arg);

            var decoded = GTXOperation.Decode(gtxOperation.Encode());
            Assert.Equal(operationName, decoded.OpName);
            Assert.Equal(arg.Choice, decoded.Args[0].Choice);
            Assert.Equal(arg.Integer, decoded.Args[0].Integer);
        }

        [Fact]
        public void SimpleTransactionTest()
        {
            var blockhainID = ASN1Util.StringToByteArray("78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3");
            var signer = ASN1Util.StringToByteArray("034ca0506ddf2328dc903c685f1638a9af33e572ee437867e7c4404bd21bf2adfe");
            var signature = ASN1Util.StringToByteArray("71a1fe694b7853209313cc09d2ba9f5115c63914eee33dd186a638b48fcbcd2464488e91787e9e9d5ef904b389d177e3b309f3951df44ead2047f0308832520c");

            var gtxTransaction = new GTXTransaction();
            gtxTransaction.BlockchainID = blockhainID;
            gtxTransaction.Signatures.Add(signature);
            gtxTransaction.Signers.Add(signer);

            var encoded = gtxTransaction.Encode();
            var decoded = GTXTransaction.Decode(encoded);

            Assert.Equal(blockhainID, decoded.BlockchainID);
            Assert.Equal(signer, decoded.Signers[0]);
            Assert.Equal(signature, decoded.Signatures[0]);
        }

        [Fact]
        public void ValidateTransactionTest()
        {
            // Message generated by Javascript API
            var encodedMessage = "3081ab042078967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3301f301d0c036e6f703016a2140c12302e383232343035323038333035303033353022042002c02a7c6d07cb6a402133063fbf1824bf826ccd7b3863a2dc90d7a42190500630420440af942381f180632b31b5c400c0e4c19a0206cba885af0c26dcae0bff69ea1faa73e305a3cb859acfbe19e0c00c3c6cf4880793a023e9a390ec09de028263726d";
            var encodedBytes = ASN1Util.StringToByteArray(encodedMessage);

            var expectedBlockchainId = ASN1Util.StringToByteArray("78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3");
            var expectedOpName = "nop";
            var expectedArgString = "0.8224052083050035";
            var expectedSigner = ASN1Util.StringToByteArray("02c02a7c6d07cb6a402133063fbf1824bf826ccd7b3863a2dc90d7a421905006");

            var gtxTransaction = GTXTransaction.Decode(encodedBytes);
            Assert.Equal(expectedBlockchainId, gtxTransaction.BlockchainID);
            Assert.Equal(expectedOpName, gtxTransaction.Operations[0].OpName);
            Assert.Equal(GTXValueChoice.String, gtxTransaction.Operations[0].Args[0].Choice);
            Assert.Equal(expectedArgString, gtxTransaction.Operations[0].Args[0].String);
            Assert.Equal(expectedSigner, gtxTransaction.Signers[0]);
        }

        [Fact]
        public void GTXValueTest()
        {
            var gtxValue = new GTXValue();

            Assert.Throws<System.Exception>(() => gtxValue.Encode());

            gtxValue.Choice = GTXValueChoice.Integer;

            Assert.Equal(0, gtxValue.Integer);

            int expectedInteger = 42;
            gtxValue.Integer = expectedInteger;
            var newGtxValue = GTXValue.Decode(gtxValue.Encode());

            Assert.Equal(GTXValueChoice.Integer, newGtxValue.Choice);
            Assert.Equal(expectedInteger, newGtxValue.Integer);
        }
        
        // Translated tests from Javascript API
        private GTXTransaction CreateTestTransaction(List<GTXOperation> operations = null, List<byte[]> signers = null, List<byte[]> signatures = null)
        {
            var gtxTransaction = new GTXTransaction();

            gtxTransaction.BlockchainID = ASN1Util.StringToByteArray("affe");
            if (operations != null) gtxTransaction.Operations = operations;
            if (signatures != null) gtxTransaction.Signatures = signatures;
            if (signers != null) gtxTransaction.Signers = signers;

            return gtxTransaction;
        }

        private GTXTransaction EncodeAndDecodTransaction(GTXTransaction gtxTransaction)
        {
            return GTXTransaction.Decode(gtxTransaction.Encode());
        }

        [Fact]
        public void EmptyCall()
        {
            var gtxTransaction = CreateTestTransaction();
            
            Assert.Equal(gtxTransaction, EncodeAndDecodTransaction(gtxTransaction));
        }

        [Fact]
        public void EmptyCallWithOneSignature()
        {
            var signatures = new List<byte[]> {ASN1Util.StringToByteArray("cafe")};
            var gtxTransaction = CreateTestTransaction(signatures: signatures);
            
            //Assert.Equal(gtxTransaction, EncodeAndDecodTransaction(gtxTransaction));    <-- Fails because of no deep equals
        }

        [Fact]
        public void SingleCallWithNoParam()
        {
            var operations = new List<GTXOperation> {new GTXOperation("func1åäö")};
            var gtxTransaction = CreateTestTransaction(operations: operations);
            
            Assert.Equal(gtxTransaction, GTXTransaction.Decode(gtxTransaction.Encode()));
        }

        [Fact]
        public void SingleCallWithNoSignature()
        {
            var operations = new List<GTXOperation> {new GTXOperation("func1åäö")};
            var signers = new List<byte[]> {ASN1Util.StringToByteArray("cafe"), ASN1Util.StringToByteArray("affe")};            
            var gtxTransaction = CreateTestTransaction(operations: operations, signers: signers);
            
            //Assert.Equal(gtxTransaction, EncodeAndDecodTransaction(gtxTransaction));    <-- Fails because of no deep equals
        }

        private GTXValue BuildArg(GTXValueChoice choice, dynamic arg)
        {
            var gtxValue = new GTXValue();
            gtxValue.Choice = choice;

            switch (choice)
            {
                case (GTXValueChoice.ByteArray):
                {
                    gtxValue.ByteArray = arg;
                    break;
                }
                case (GTXValueChoice.String):
                {
                    gtxValue.String = arg;
                    break;
                }
                case (GTXValueChoice.Integer):
                {
                    gtxValue.Integer = arg;
                    break;
                }
                case (GTXValueChoice.Dict):
                {
                    gtxValue.Dict = arg;
                    break;
                }
                case (GTXValueChoice.Array):
                {
                    gtxValue.Array = arg;
                    break;
                }
            }

            return gtxValue;
        }

        [Theory]
        [InlineData(1)]
        [InlineData(-1)]
        [InlineData(0)]
        [InlineData(System.Int32.MinValue + 1)]
        [InlineData(System.Int32.MaxValue)]
        public void SingleCallWithSingleIntParam(int arg)
        {
            var operations = new List<GTXOperation> {new GTXOperation("func1åäö")};
            operations[0].Args = new List<GTXValue> {BuildArg(GTXValueChoice.Integer, arg)};                     
            var gtxTransaction = CreateTestTransaction(operations: operations);
            
            Assert.Equal(gtxTransaction, EncodeAndDecodTransaction(gtxTransaction));
        }

        [Theory]
        [InlineData("hello")]
        public void SingleCallWithSingleStringParam(string arg)
        {
            var operations = new List<GTXOperation> {new GTXOperation("func1åäö")};
            operations[0].Args = new List<GTXValue> {BuildArg(GTXValueChoice.String, arg)};                     
            var gtxTransaction = CreateTestTransaction(operations: operations);
            
            Assert.Equal(gtxTransaction, EncodeAndDecodTransaction(gtxTransaction));
        }
    }
}
