using Xunit;
using Chromia.PostchainClient.GTX.ASN1Messages;
using System;

namespace Chromia.PostchainClient.Tests.GTX
{
    public class GTXTest
    {
        [Fact]
        public void SimpleOperationTest(){
            var operationName = "TestOperation";
            var arg = new GTXValue();
            arg.Choice = GTXValueChoice.Integer;
            arg.Integer = 42;

            var gtxOperation = new GTXOperation();
            gtxOperation.OpName = operationName;
            gtxOperation.Args.Add(arg);

            var decoded = GTXOperation.Decode(gtxOperation.Encode());
            Assert.Equal(decoded.OpName, operationName);
            Assert.Equal(decoded.Args[0].Choice, arg.Choice);
            Assert.Equal(decoded.Args[0].Integer, arg.Integer);
        }

        [Fact]
        public void SimpleTransactionTest(){
            var blockhainID = ASN1Util.StringToByteArray("78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3");
            var signer = ASN1Util.StringToByteArray("034ca0506ddf2328dc903c685f1638a9af33e572ee437867e7c4404bd21bf2adfe");
            var signature = ASN1Util.StringToByteArray("71a1fe694b7853209313cc09d2ba9f5115c63914eee33dd186a638b48fcbcd2464488e91787e9e9d5ef904b389d177e3b309f3951df44ead2047f0308832520c");

            var gtxTransaction = new GTXTransaction();
            gtxTransaction.BlockchainID = blockhainID;
            gtxTransaction.Signatures.Add(signature);
            gtxTransaction.Signers.Add(signer);

            var encoded = gtxTransaction.Encode();
            Console.WriteLine(ASN1Util.ByteArrayToString(encoded));
            var decoded = GTXTransaction.Decode(encoded);

            Assert.Equal(decoded.BlockchainID, blockhainID);
            Assert.Equal(decoded.Signers[0], signer);
            Assert.Equal(decoded.Signatures[0], signature);
        }

        [Fact]
        public void ValidateTransactionTest(){
            // Message generated by Javascript API
            var encodedMessage = "3081ab042078967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3301f301d0c036e6f703016a2140c12302e383232343035323038333035303033353022042002c02a7c6d07cb6a402133063fbf1824bf826ccd7b3863a2dc90d7a42190500630420440af942381f180632b31b5c400c0e4c19a0206cba885af0c26dcae0bff69ea1faa73e305a3cb859acfbe19e0c00c3c6cf4880793a023e9a390ec09de028263726d";
            var encodedBytes = ASN1Util.StringToByteArray(encodedMessage);

            var expectedBlockchainId = ASN1Util.StringToByteArray("78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3");
            var expectedOpName = "nop";
            var expectedArgString = "0.8224052083050035";
            var expectedSigner = ASN1Util.StringToByteArray("02c02a7c6d07cb6a402133063fbf1824bf826ccd7b3863a2dc90d7a421905006");

            var gtxTransaction = GTXTransaction.Decode(encodedBytes);
            Assert.Equal(gtxTransaction.BlockchainID, expectedBlockchainId);
            Assert.Equal(gtxTransaction.Operations[0].OpName, expectedOpName);
            Assert.Equal(gtxTransaction.Operations[0].Args[0].Choice, GTXValueChoice.String);
            Assert.Equal(gtxTransaction.Operations[0].Args[0].String, expectedArgString);
            Assert.Equal(gtxTransaction.Signers[0], expectedSigner);
        }

        [Fact]
        public void GTXValueTest(){
            var gtxValue = new GTXValue();

            Assert.Throws<System.Exception>(() => gtxValue.Encode());

            gtxValue.Choice = GTXValueChoice.Integer;

            Assert.Equal(gtxValue.Integer, 0);

            int expectedInteger = 42;
            gtxValue.Integer = expectedInteger;
            var newGtxValue = GTXValue.Decode(gtxValue.Encode());

            Assert.Equal(newGtxValue.Choice, GTXValueChoice.Integer);
            Assert.Equal(newGtxValue.Integer, expectedInteger);
        }
    }
}
